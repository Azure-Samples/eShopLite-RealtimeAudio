@page "/"
@using OpenAI.Chat
@using OpenAI.RealtimeConversation
@using System.IO.Pipelines
@using StoreRealtime.ContextManagers
@using StoreRealtime.Models
@implements IDisposable
@inject RealtimeConversationClient RealtimeConversationClient
@inject ContosoProductContext contosoProductContext
@inject ILogger<Program> logger
@inject IJSRuntime JSRuntime
@inject IJSRuntime JS

<PageTitle>eShopLite - Realtime chat support</PageTitle>

@if (isMicActive)
{
    <Microphone OnMicAvailable="@OnMicAvailable" />
}

<Speaker @ref="@speaker" />

<div class="net-brand-page">
    <div class="main-content" @ref="mainContentSection">

        @* CHAT SECTION *@
        <div class="chat-section">
            <div class="messages">
                @foreach (var chatMessage in chatMessages)
                {
                    var messageStyle = chatMessage.IsUser ? "message message-user visible" : "message message-assistant visible";
                    var messageUserStyle = chatMessage.IsUser ? "message-text message-user-text" : "message-text";
                    var senderName = chatMessage.IsUser ? "You" : "Assistant";

                    <div class="@messageStyle">
                        <div class="sender-name">@senderName</div>
                        <div class="message-content">
                            <div class="@messageUserStyle">@chatMessage.Message</div>
                            <div class="message-time">@chatMessage.Timestamp.ToString("G")</div>
                        </div>
                    </div>
                }
            </div>
            <button id="ButtonChatStartStop" class="btn btn-purple" @onclick="ToggleMic">
                @(isMicActive ? "Stop Live Chat" : "Start Live Chat")
            </button>
        </div>

        @* REALTIME AUDIO LOG SECTION *@
        <div class="info-log-section">

            <h4>Realtime Audio Log</h4>
            <i class="icon-top-right">🔊</i>
            <ul class="info-log">
                @foreach (var message in messages)
                {
                    <li>@message</li>
                }
            </ul>
        </div>
    </div>
</div>

@code {
    private ConversationManager? conversationManager;
    private CancellationTokenSource disposalCts = new();
    private bool isMicActive = false;
    private Speaker? speaker;
    private readonly List<LogMessage> messages = new();
    private readonly List<RealtimeChatMessage> chatMessages = new();
    private ElementReference mainContentSection;

    private void ToggleMic()
    {
        if (isMicActive)
        {
            // Stop interaction
            conversationManager?.Dispose();
            isMicActive = false;
        }
        else
        {
            // Start interaction
            disposalCts = new CancellationTokenSource();
            isMicActive = true;
        }
    }

    private void OnMicAvailable(PipeReader micReader)
    {
        conversationManager = new(RealtimeConversationClient, contosoProductContext, logger);
        _ = RunAsBackgroundTask(() => conversationManager.RunAsync(micReader.AsStream(), speaker!,
            AddMessageAsync, AddChatMessageAsync, disposalCts.Token));
    }

    public void Dispose()
    {
        disposalCts.Cancel();
        conversationManager?.Dispose();
    }

    private async Task AddChatMessageAsync(string message, bool isUserMessage)
    {
        var cm = new RealtimeChatMessage
        {
            Message = message,
            IsUser = isUserMessage,
            Timestamp = DateTime.Now
        };
        chatMessages.Add(cm);
        await InvokeAsync(StateHasChanged);
        ScrollToBottom(mainContentSection);
    }

    private async Task AddMessageAsync(string message)
    {
        messages.Add(new LogMessage(message));
        await InvokeAsync(StateHasChanged);
    }

    private Task RunAsBackgroundTask(Func<Task> work)
    {
        return Task.Run(async () =>
        {
            try
            {
                await work();
            }
            catch (Exception ex) when (ex is not OperationCanceledException)
            {
                _ = DispatchExceptionAsync(ex);
            }
        });
    }

    private void ScrollToBottom(ElementReference element)
    {
        _ = JSRuntime.InvokeVoidAsync("scrollToBottom", element);
    }
}

<link rel="stylesheet" href="css/chat.css" />
